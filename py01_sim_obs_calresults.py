#! /usr/bin/python
# -*- coding: utf-8 -*-

"""
This script was created by Qingyu Feng
on Dec 29, 2015

The goal of this script is to generate two columns
for calculating statistics and making graphs for
analyzing the output from SWAT run.

The output.rch file have to be formated to printed certain variables.
If not, the program need to be adjusted to do the calculation.
The file.cio need to be formatted as (for Reach output variables):
   2   6   9  11  13  15  17  19  43  44  45   0   0   0   0   0   0   0   0   0


The input files are the .simrch files for each targeted stns for
simulated values and the .obsfcal or .obstscal files for targeted
variables. 

The next step is to calculate the statistics.
This will be done by generating a code named "py02statistic_cal.py".
Figures for all these stations will also be generated for
better analying the model simulation results.

"""

## System setup
# For folder check
import os
# For copying files
import shutil
# Making graphs
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
## Input files
"""
Input files include two sets:
1. Observed files
need to be prepared first.
The observed data for calibration was obtained from Nina's
SWATcup project. The format was down in that way.
The time of each observation was preserved because there might be
missing data and these months will be used for matching purposes.
Matching the obs and sim data on days.

2. Simulated files:
These were generated by the Awk script in the shell script.

There are 5 variables, and they will be processed one by one.

"""
# Observed 
# There are 5 variables
target_var = [0]*5
target_var[0] = "flow"
target_var[1] = "tss"
target_var[2] = "no3"
target_var[3] = "tn"
target_var[4] = "tp"

pdfext = "oldtd_def01_cnred_gw"
## Input folders
      
# Simulated
siminfd = "rch_allvar_stns"
if not os.path.isdir(siminfd):
    print("Input folder for simulation does not exist, please check")
# List all files in the siminfd
siminflst = os.listdir(siminfd)
print(siminflst)
# Generate date list for simulation
sim_start_yr = 1995
sim_end_yr = 2005
yrlst = []
while sim_start_yr <= sim_end_yr:
    yrlst.append(sim_start_yr)
    sim_start_yr += 1

monthlst = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

# Observation
def obs_infd_gen(varidx):
    
    # Every time, this was called,
    # The container should be reset to 0.
    obsinfd = []
    obsinfd = "cal0%i_%s_95_05" %(varidx + 1, target_var[varidx])
    if not os.path.isdir(obsinfd):
        print("Input folder for observations of %s does not exist, please check"
                %(target_var[varidx]))

    return obsinfd



"""
The next step is to loop through all variables
For each variables, the functions required are:
1. In each folder, get a list of all files.
2. Extract a station list which could be used to extract variables from
   from simulation.
3. open each station file, and get all the lines, store them in
   to proper variables, for obs and sim
4. combine obs and sim for corresponding dates.
5. Write the two columns into the cal folder
6. Call Cal_RF variable to do the calculation
7. Graph each station and put them into a single figure for all stations.

"""

#### Functions
# Get a list of files in observation folder
def get_obsinflst(obsinfd):
    
    obsinflst = [] # reset to 0 for new variables    

    for file in os.listdir(obsinfd):
        if file.endswith(".obscal"):
            obsinflst.append(file)

    # Add a new variable to store just the obsstn number    
    obsstns = [0]*len(obsinflst)
    for obsidx in range(len(obsinflst)):
        obsstns[obsidx] = obsinflst[obsidx].split("_")[0]

    #del obsstns[-1]
    
    return obsinflst, obsstns

# Generate columns of obs and sim for each station and then 
# write them into an independent file
def gene_obs_sim(siminflst, obsinflst, obsstns, varidx, obsinfd, siminfd,yrlst, monthlst):

    obscol_len = []
    obscol_plotall = []
    simcol_plotall = []
    time_plotall = []

    # Open observed files:
    for obstnidx in obsstns:

        print(obstnidx)
        print("reset columns")
        obscol = []
        obsftemp = []
        simcolallvar = []
        simftemp = []
        obssim_2colf = 0

        obscol_plot = []
        simcol_plot = []
        time_plot = []
        
        # Every time, this ymlist need to be reset to empty.
        simcol_1var = []
        for yridx in yrlst:
            for midx in monthlst:
                simcol_1var.append(midx + str(yridx)[2:])
        
        # Open observed files:
        print("Openning observation files at station %s" %(obstnidx))
        for obsfidx in obsinflst:
            if (obstnidx in obsfidx) and (".obs" in obsfidx) : # For specification stn
                obsftemp = open(obsinfd + "/" + obsfidx, "r")
                obscol = obsftemp.readlines()
                obsftemp.close()

            # Post process obscol 
        del obscol[0:4]
        for obscidx in range(len(obscol)):
            obscol[obscidx] = obscol[obscidx].split("\t")
            obscol[obscidx][1] = obscol[obscidx][1].split("_")[2:4]
            obscol[obscidx][1] = obscol[obscidx][1][0] + obscol[obscidx][1][1]
            obscol[obscidx][2] = obscol[obscidx][2][:-1]

        
        print("Openning simulated results at station %s" %(obstnidx))
        for simfidx in siminflst:
            if (obstnidx in simfidx) and (".sim" in simfidx): # For specification stn
                print(siminfd + "/" + simfidx)
                simftemp = open(siminfd + "/" + simfidx, "r")
                simcolallvar = simftemp.readlines()
                simftemp.close()
                
                del simcolallvar[0]
                for simcidx in range(len(simcolallvar)):
                    simcolallvar[simcidx] = simcolallvar[simcidx].split(" ")
                    while "" in simcolallvar[simcidx]:
                        simcolallvar[simcidx].remove("")
                
        # Post processing simcol to include only the desired var
                for sim1vidx in range(len(simcol_1var)):
                    # varidx = 0 means for flow, 5th column                
                    if varidx == 0:
                        simcol_1var[sim1vidx] = [simcol_1var[sim1vidx],
                                                 simcolallvar[sim1vidx][3],
                                                 simcolallvar[sim1vidx][5]
                                                 ]
                    # varidx = 1 means for tss,6th column                                
                    if varidx == 1:
                        simcol_1var[sim1vidx] = [simcol_1var[sim1vidx],
                                                 simcolallvar[sim1vidx][3],
                                                 simcolallvar[sim1vidx][6]
                                                 ]
                    # varidx = 2 means for no3,15th column                                
                    if varidx == 2:
                        simcol_1var[sim1vidx] = [simcol_1var[sim1vidx],
                                                 simcolallvar[sim1vidx][3],
                                                 simcolallvar[sim1vidx][15]
                                                 ]
                    # varidx = 3 means for tn,13th column                                
                    if varidx == 3:
                        simcol_1var[sim1vidx] = [simcol_1var[sim1vidx],
                                                 simcolallvar[sim1vidx][3],
                                                 simcolallvar[sim1vidx][13]
                                                 ]
                    # varidx = 4 means for tp,14th column                                
                    if varidx == 4:
                        simcol_1var[sim1vidx] = [simcol_1var[sim1vidx],
                                                 simcolallvar[sim1vidx][3],
                                                 simcolallvar[sim1vidx][14]
                                                 ]
            
                    
        # Now, there are two list, obs and sim.
        # The next step is to compare them and write the list for
        # corresponding days. At last the columns will contain only
        # obs and sim and will be then written into a file.
        # The two columns are here: obscol and simcol_1var
        obssim_2colf = open("%s/F%s.prn" %(obsinfd, obstnidx), "w")
        obssim_2colf.writelines("\n")        

        for obscolidx in range(len(obscol)):
            for s1vidx in simcol_1var:
                if obscol[obscolidx][1] == s1vidx[0]:
                    obscol[obscolidx].append(s1vidx[2])
                    obssim_2colf.writelines("%.1f\t%.3f\n" %(float(obscol[obscolidx][2]),
                                                         float(obscol[obscolidx][3])
                                                         )
                                            )
                    obscol_plot.append(obscol[obscolidx][2])
                    simcol_plot.append(obscol[obscolidx][3])
                    time_plot.append(obscol[obscolidx][1])

        obssim_2colf.close()

        # Making graphs for each station
                
        obscol_plotall.append(obscol_plot)
        simcol_plotall.append(simcol_plot)
        time_plotall.append(time_plot)

        # get the length of each observation column
        obscol_len.append(len(obscol))

    return obscol_len, obscol_plotall, simcol_plotall, time_plotall

        # After this is down, I will need to prepare a run file
        # for the running of cal_r2.exe.
        # This will be down in a separate function
            
# Write run file for exe calling
# In this function, I will also copy exe to each folder
def write_runf(obsstns, obscol_len, obsinfd):

    runf = open("%s/RUN.DAT" %(obsinfd),"w")
    for stnidx in range(len(obsstns)):
        runf.writelines("F%s.prn   %i\n" %(obsstns[stnidx],obscol_len[stnidx]))
    runf.close()

    # copying CAL_EF_R2.exe into this obsinfd
    shutil.copy2("Cal_EF_R2.exe", "%s/Cal_EF_R2.exe" %(obsinfd))

    # Run Cal exe
    os.chdir(obsinfd)
    if os.path.isfile("result.OUT"):
        os.remove("result.OUT")
    os.system("Cal_EF_R2.exe")
    os.chdir("..")
    print(os.getcwd())

## Function calling
for varidx in range(len(target_var)):

    # Generating input folder for observations
    obsinfd = obs_infd_gen(varidx)
    print("Processing calibration for %s." %(target_var[varidx]))
    
    # Get a list of file names in each folder
    obsinflst, obsstns = get_obsinflst(obsinfd)
    # Generate columns for obs and sim
    # I will also try to generate figures of each station within
    # this function.
    obscol_len, obscol_plotall, simcol_plotall, time_plotall = gene_obs_sim(siminflst, obsinflst, obsstns, varidx, obsinfd, siminfd,yrlst, monthlst)

    # Write run files for calling cal_r2.exe
    write_runf(obsstns, obscol_len, obsinfd)
    
    # Making plot of the obs and sim

    pdf = PdfPages("%s/%s_calibration_%s.pdf" %(obsinfd, target_var[varidx], pdfext))
    print("Generating figures")
    for obspidx in range(len(obscol_plotall)):
        
        plt.plot(obscol_plotall[obspidx], label="Observation")
        plt.plot(simcol_plotall[obspidx], label="Simulation")
        plt.legend(loc="upper right",fontsize='x-large')
        plt.title("Station %s %s calibration" %(obsstns[obspidx], target_var[varidx]))
        pdf.savefig()
        plt.close()
    print("Generating figures finished")
    pdf.close()
        
        

    


    
        
    





















